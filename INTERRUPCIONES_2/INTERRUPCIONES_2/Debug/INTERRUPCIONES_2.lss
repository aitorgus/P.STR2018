
INTERRUPCIONES_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000757  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000688  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  88:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include <avr/io.h>
#include <avr/interrupt.h> //Permiten el control de IRQs
unsigned contador=0; //Debemos de poner a 0 la variable global

void initADC(void) {
	ADCSRA = (1 <<ADEN)+ (1<< ADPS2)+(0<<ADPS1)+(0<<ADPS0)+(1<<ADIE) + (1<<ADSC);
  90:	8c ec       	ldi	r24, 0xCC	; 204
  92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	//ADPS2:0 (son 3 bits de control) Preescalado del reloj para la conversión, ADC necesita entre 50 Khz a 200 Khz
	//a mayor frecuencia , conversión mas rápida
	//Menor frecuencia, conversión mas exacta
	
	ADMUX = (1 << REFS0)  + (1 << ADLAR);
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  9c:	08 95       	ret

0000009e <digitalWrite>:
	//CON 0 A LA DERECHA
}


void digitalWrite(unsigned char data) {
	PORTB = (0b00000001 & data )<<2; //Como está en el puerto B2 (hay que desplazarlo dos posiciones a la izq)
  9e:	98 2f       	mov	r25, r24
  a0:	91 70       	andi	r25, 0x01	; 1
  a2:	99 0f       	add	r25, r25
  a4:	99 0f       	add	r25, r25
  a6:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000010 & data); //Está en la segunda posicion (está en su sitio)
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	28 2f       	mov	r18, r24
  ac:	22 70       	andi	r18, 0x02	; 2
  ae:	92 2b       	or	r25, r18
  b0:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000100 & data)>>2 ; //Esta en la posicion 2 (HAY QUE DESPLAZARLO 2 A LA DERECHA PARA QUE SE UBIQUE EN EL 0)
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	82 fb       	bst	r24, 2
  b6:	22 27       	eor	r18, r18
  b8:	20 f9       	bld	r18, 0
  ba:	92 2b       	or	r25, r18
  bc:	95 b9       	out	0x05, r25	; 5
	PORTD = (0b00001000 & data)<<4 ; //Estamos la posicion 3 y queremos llegar a PD7 (DESPLAZO 4 POSICIONES)
  be:	98 2f       	mov	r25, r24
  c0:	98 70       	andi	r25, 0x08	; 8
  c2:	92 95       	swap	r25
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00010000 & data)<<1   ; //Estamos en posicion 4 y queremos llegar pd5 (desplazo 1)
  c8:	2b b1       	in	r18, 0x0b	; 11
  ca:	98 2f       	mov	r25, r24
  cc:	90 71       	andi	r25, 0x10	; 16
  ce:	99 0f       	add	r25, r25
  d0:	92 2b       	or	r25, r18
  d2:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00100000 & data)>>1  ;
  d4:	2b b1       	in	r18, 0x0b	; 11
  d6:	98 2f       	mov	r25, r24
  d8:	90 72       	andi	r25, 0x20	; 32
  da:	96 95       	lsr	r25
  dc:	92 2b       	or	r25, r18
  de:	9b b9       	out	0x0b, r25	; 11
	PORTC = (0b01000000 & data)>>2 ;
  e0:	80 74       	andi	r24, 0x40	; 64
  e2:	98 2f       	mov	r25, r24
  e4:	96 95       	lsr	r25
  e6:	96 95       	lsr	r25
  e8:	98 b9       	out	0x08, r25	; 8
	PORTC |= (0b1000000 & data)>>4 ;
  ea:	98 b1       	in	r25, 0x08	; 8
  ec:	82 95       	swap	r24
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	89 2b       	or	r24, r25
  f2:	88 b9       	out	0x08, r24	; 8
  f4:	08 95       	ret

000000f6 <__vector_21>:
}

ISR(ADC_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	//Seleccionamos ADC
	ADMUX |= (5 & 0X0F);
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	85 60       	ori	r24, 0x05	; 5
 120:	80 83       	st	Z, r24
	digitalWrite(ADCH);
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 126:	0e 94 4f 00 	call	0x9e	; 0x9e <digitalWrite>
	ADCSRA |= (1<<ADSC); //Vuelvo a activar el contador
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_3>:

ISR(PCINT0_vect) //Puerto B 
{ 
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	if ((PINB & (1<< PINB4)) >> 4)
 178:	1c 9b       	sbis	0x03, 4	; 3
 17a:	0c c0       	rjmp	.+24     	; 0x194 <__vector_3+0x3e>
	{
		//Pulsamos botón A, el contador se incrementa
		contador++;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		digitalWrite(contador);
 18e:	0e 94 4f 00 	call	0x9e	; 0x9e <digitalWrite>
 192:	0d c0       	rjmp	.+26     	; 0x1ae <__vector_3+0x58>
	}
	else if ((PINB & (1<<PINB3))>> 3)
 194:	1b 9b       	sbis	0x03, 3	; 3
 196:	0b c0       	rjmp	.+22     	; 0x1ae <__vector_3+0x58>
	{
		contador--;
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		digitalWrite(contador);
 1aa:	0e 94 4f 00 	call	0x9e	; 0x9e <digitalWrite>
	}
	
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_5>:

ISR(PCINT2_vect){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	
if ((PIND & (1<<PIND2))>>2)
 1f2:	4a 99       	sbic	0x09, 2	; 9

	{
		initADC();
 1f4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	}
	
	
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <main>:


int main(void)
{
	
	cli(); //Deshabilito interrupciones
 21a:	f8 94       	cli
	DDRB = 0b00000111;
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00011000;
 220:	88 e1       	ldi	r24, 0x18	; 24
 222:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10110000;
 224:	90 eb       	ldi	r25, 0xB0	; 176
 226:	9a b9       	out	0x0a, r25	; 10
	PCICR=(1<<PCIE0)+(1<<PCIE2) ;//MASCARA (PÁGINA 8)
 228:	95 e0       	ldi	r25, 0x05	; 5
 22a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 =(1<<PCINT4)+(1<<PCINT3)  ;//BOTONES QUE ESTÁN EN EL 0 (PAGINA 9)
 22e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCMSK2=(1<<PCINT18) ;//BOTON PD2 (PÁGINA 9)
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	digitalWrite(0);//Ponemos a 0 los leds
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 4f 00 	call	0x9e	; 0x9e <digitalWrite>
	
	sei(); //Las habilito de nuevo
 23e:	78 94       	sei
 240:	ff cf       	rjmp	.-2      	; 0x240 <main+0x26>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
