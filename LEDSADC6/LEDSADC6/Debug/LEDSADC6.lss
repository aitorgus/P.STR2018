
LEDSADC6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000719  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
 */ 

#include <avr/io.h>

void initADC(void) {
	ADCSRA = (1 <<ADEN)+ (1<< ADPS2)+(0<<ADPS1)+(0<<ADPS0);
  80:	84 e8       	ldi	r24, 0x84	; 132
  82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	//ADPS2:0 (son 3 bits de control) Preescalado del reloj para la conversión, ADC necesita entre 50 Khz a 200 Khz
	//a mayor frecuencia , conversión mas rápida
	//Menor frecuencia, conversión mas exacta
	
	ADMUX = (1 << REFS0)  + (1 << ADLAR);
  86:	ec e7       	ldi	r30, 0x7C	; 124
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	80 83       	st	Z, r24
	ADMUX |= 5;
  8e:	80 81       	ld	r24, Z
  90:	85 60       	ori	r24, 0x05	; 5
  92:	80 83       	st	Z, r24
  94:	08 95       	ret

00000096 <getADCH>:
char getADCH (void){
	
	int ADCchanel=5;
	//ADMUX 3:0 , Para seleccionar el canal ADC5 -> 0101
	//En primer lugar , seleccionamos el canal de ADC
	ADMUX |= (ADCchanel & 0x0F);
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	85 60       	ori	r24, 0x05	; 5
  9e:	80 83       	st	Z, r24
	//Conversion simple
	ADCSRA |= (1<<ADSC);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	//Esperamos la conversión
	while ( ADCSRA & (1 << ADSC));
  aa:	80 81       	ld	r24, Z
  ac:	86 fd       	sbrc	r24, 6
  ae:	fd cf       	rjmp	.-6      	; 0xaa <getADCH+0x14>
	return ADCH;
  b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
}
  b4:	08 95       	ret

000000b6 <digitalWrite>:

void digitalWrite(unsigned char data) {
	PORTB = (0b00000001 & data )<<2; //Como está en el puerto B2 (hay que desplazarlo dos posiciones a la izq)
  b6:	98 2f       	mov	r25, r24
  b8:	91 70       	andi	r25, 0x01	; 1
  ba:	99 0f       	add	r25, r25
  bc:	99 0f       	add	r25, r25
  be:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000010 & data); //Está en la segunda posicion (está en su sitio)
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	28 2f       	mov	r18, r24
  c4:	22 70       	andi	r18, 0x02	; 2
  c6:	92 2b       	or	r25, r18
  c8:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000100 & data)>>2 ; //Esta en la posicion 2 (HAY QUE DESPLAZARLO 2 A LA DERECHA PARA QUE SE UBIQUE EN EL 0)
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	82 fb       	bst	r24, 2
  ce:	22 27       	eor	r18, r18
  d0:	20 f9       	bld	r18, 0
  d2:	92 2b       	or	r25, r18
  d4:	95 b9       	out	0x05, r25	; 5
	PORTD = (0b00001000 & data)<<4 ; //Estamos la posicion 3 y queremos llegar a PD7 (DESPLAZO 4 POSICIONES)
  d6:	98 2f       	mov	r25, r24
  d8:	98 70       	andi	r25, 0x08	; 8
  da:	92 95       	swap	r25
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00010000 & data)<<1   ; //Estamos en posicion 4 y queremos llegar pd5 (desplazo 1)
  e0:	2b b1       	in	r18, 0x0b	; 11
  e2:	98 2f       	mov	r25, r24
  e4:	90 71       	andi	r25, 0x10	; 16
  e6:	99 0f       	add	r25, r25
  e8:	92 2b       	or	r25, r18
  ea:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00100000 & data)>>1  ;
  ec:	2b b1       	in	r18, 0x0b	; 11
  ee:	98 2f       	mov	r25, r24
  f0:	90 72       	andi	r25, 0x20	; 32
  f2:	96 95       	lsr	r25
  f4:	92 2b       	or	r25, r18
  f6:	9b b9       	out	0x0b, r25	; 11
	PORTC = (0b01000000 & data)>>2 ;
  f8:	80 74       	andi	r24, 0x40	; 64
  fa:	98 2f       	mov	r25, r24
  fc:	96 95       	lsr	r25
  fe:	96 95       	lsr	r25
 100:	98 b9       	out	0x08, r25	; 8
	PORTC |= (0b1000000 & data)>>4 ;
 102:	98 b1       	in	r25, 0x08	; 8
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	08 95       	ret

0000010e <main>:
}

int main(void)
{
	DDRB = 0b00000111;
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00011000;
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10110000;
 116:	80 eb       	ldi	r24, 0xB0	; 176
 118:	8a b9       	out	0x0a, r24	; 10
	unsigned char leer;
	
	initADC();
 11a:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	while (1)
	{leer = getADCH();
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <getADCH>
		digitalWrite(leer);
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <digitalWrite>
 126:	fb cf       	rjmp	.-10     	; 0x11e <main+0x10>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
