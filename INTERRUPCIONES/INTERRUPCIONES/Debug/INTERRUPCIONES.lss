
INTERRUPCIONES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ea  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
#include <avr/interrupt.h> //Permiten el control de IRQs



void initADC(void) {
	ADCSRA = (1 <<ADEN)+ (1<< ADPS2)+(0<<ADPS1)+(0<<ADPS0)+(1<<ADIE) + (1<<ADSC);
  80:	8c ec       	ldi	r24, 0xCC	; 204
  82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	//ADPS2:0 (son 3 bits de control) Preescalado del reloj para la conversión, ADC necesita entre 50 Khz a 200 Khz
	//a mayor frecuencia , conversión mas rápida
	//Menor frecuencia, conversión mas exacta
	
	ADMUX = (1 << REFS0)  + (1 << ADLAR);
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  8c:	08 95       	ret

0000008e <digitalWrite>:
	//CON 0 A LA DERECHA
}


void digitalWrite(unsigned char data) {
	PORTB = (0b00000001 & data )<<2; //Como está en el puerto B2 (hay que desplazarlo dos posiciones a la izq)
  8e:	98 2f       	mov	r25, r24
  90:	91 70       	andi	r25, 0x01	; 1
  92:	99 0f       	add	r25, r25
  94:	99 0f       	add	r25, r25
  96:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000010 & data); //Está en la segunda posicion (está en su sitio)
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	28 2f       	mov	r18, r24
  9c:	22 70       	andi	r18, 0x02	; 2
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
	PORTB |= (0b00000100 & data)>>2 ; //Esta en la posicion 2 (HAY QUE DESPLAZARLO 2 A LA DERECHA PARA QUE SE UBIQUE EN EL 0)
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	82 fb       	bst	r24, 2
  a6:	22 27       	eor	r18, r18
  a8:	20 f9       	bld	r18, 0
  aa:	92 2b       	or	r25, r18
  ac:	95 b9       	out	0x05, r25	; 5
	PORTD = (0b00001000 & data)<<4 ; //Estamos la posicion 3 y queremos llegar a PD7 (DESPLAZO 4 POSICIONES)
  ae:	98 2f       	mov	r25, r24
  b0:	98 70       	andi	r25, 0x08	; 8
  b2:	92 95       	swap	r25
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00010000 & data)<<1   ; //Estamos en posicion 4 y queremos llegar pd5 (desplazo 1)
  b8:	2b b1       	in	r18, 0x0b	; 11
  ba:	98 2f       	mov	r25, r24
  bc:	90 71       	andi	r25, 0x10	; 16
  be:	99 0f       	add	r25, r25
  c0:	92 2b       	or	r25, r18
  c2:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (0b00100000 & data)>>1  ;
  c4:	2b b1       	in	r18, 0x0b	; 11
  c6:	98 2f       	mov	r25, r24
  c8:	90 72       	andi	r25, 0x20	; 32
  ca:	96 95       	lsr	r25
  cc:	92 2b       	or	r25, r18
  ce:	9b b9       	out	0x0b, r25	; 11
	PORTC = (0b01000000 & data)>>2 ;
  d0:	80 74       	andi	r24, 0x40	; 64
  d2:	98 2f       	mov	r25, r24
  d4:	96 95       	lsr	r25
  d6:	96 95       	lsr	r25
  d8:	98 b9       	out	0x08, r25	; 8
	PORTC |= (0b1000000 & data)>>4 ;
  da:	98 b1       	in	r25, 0x08	; 8
  dc:	82 95       	swap	r24
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	89 2b       	or	r24, r25
  e2:	88 b9       	out	0x08, r24	; 8
  e4:	08 95       	ret

000000e6 <__vector_21>:
}

ISR(ADC_vect) {
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	//Seleccionamos ADC
	ADMUX |= (5 & 0X0F);
 108:	ec e7       	ldi	r30, 0x7C	; 124
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	85 60       	ori	r24, 0x05	; 5
 110:	80 83       	st	Z, r24
	digitalWrite(ADCH);
 112:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 116:	0e 94 47 00 	call	0x8e	; 0x8e <digitalWrite>
	ADCSRA |= (1<<ADSC); //Vuelvo a activar el contador
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
	
} 
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:
int main(void)
{
	cli(); //Deshabilito interrupciones
 146:	f8 94       	cli
	DDRB = 0b00000111;
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00011000;
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b10110000;
 150:	80 eb       	ldi	r24, 0xB0	; 176
 152:	8a b9       	out	0x0a, r24	; 10

	initADC();
 154:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	sei(); //Las habilito de nuevo
 158:	78 94       	sei
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x14>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
