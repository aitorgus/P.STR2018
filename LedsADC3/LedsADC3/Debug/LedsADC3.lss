
LedsADC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b6  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000218  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <digitalWrite>:
#include <avr/io.h>

//Observar tabla Puertos "UMA MULTIPURPOSE"

void digitalWrite(unsigned char data) {
/* Puerto PB2*/	PORTB = (0b00000001 & data )<<2; 
  80:	98 2f       	mov	r25, r24
  82:	91 70       	andi	r25, 0x01	; 1
  84:	99 0f       	add	r25, r25
  86:	99 0f       	add	r25, r25
  88:	95 b9       	out	0x05, r25	; 5
/* Puerto PB1*/	PORTB |= (0b00000010 & data); 
  8a:	95 b1       	in	r25, 0x05	; 5
  8c:	28 2f       	mov	r18, r24
  8e:	22 70       	andi	r18, 0x02	; 2
  90:	92 2b       	or	r25, r18
  92:	95 b9       	out	0x05, r25	; 5
/* Puerto PB0*/	PORTB |= (0b00000100 & data)>>2; 
  94:	95 b1       	in	r25, 0x05	; 5
  96:	82 fb       	bst	r24, 2
  98:	22 27       	eor	r18, r18
  9a:	20 f9       	bld	r18, 0
  9c:	92 2b       	or	r25, r18
  9e:	95 b9       	out	0x05, r25	; 5
/* Puerto PD7*/	PORTD = (0b00001000 & data)<<4; 
  a0:	98 2f       	mov	r25, r24
  a2:	98 70       	andi	r25, 0x08	; 8
  a4:	92 95       	swap	r25
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	9b b9       	out	0x0b, r25	; 11
/* Puerto PD5*/	PORTD |= (0b00010000 & data)<<1; 
  aa:	2b b1       	in	r18, 0x0b	; 11
  ac:	98 2f       	mov	r25, r24
  ae:	90 71       	andi	r25, 0x10	; 16
  b0:	99 0f       	add	r25, r25
  b2:	92 2b       	or	r25, r18
  b4:	9b b9       	out	0x0b, r25	; 11
/* Puerto PD4*/	PORTD |= (0b00100000 & data)>>1;
  b6:	2b b1       	in	r18, 0x0b	; 11
  b8:	98 2f       	mov	r25, r24
  ba:	90 72       	andi	r25, 0x20	; 32
  bc:	96 95       	lsr	r25
  be:	92 2b       	or	r25, r18
  c0:	9b b9       	out	0x0b, r25	; 11
/* Puerto PC4*/	PORTC = (0b01000000 & data)>>2;
  c2:	80 74       	andi	r24, 0x40	; 64
  c4:	98 2f       	mov	r25, r24
  c6:	96 95       	lsr	r25
  c8:	96 95       	lsr	r25
  ca:	98 b9       	out	0x08, r25	; 8
/* Puerto PC3*/	PORTC |= (0b1000000 & data)>>4;
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	82 95       	swap	r24
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	08 95       	ret

000000d8 <main>:

int main(void)
{
	
	while(1) {
   digitalWrite(0x0f); 
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	0e 94 40 00 	call	0x80	; 0x80 <digitalWrite>
  de:	fc cf       	rjmp	.-8      	; 0xd8 <main>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
